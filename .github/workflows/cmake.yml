name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
          - os: macos-10.15
          - os: self-hosted

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: add Debian Packages
      if: matrix.os == 'ubuntu-latest'
      uses: myci-actions/add-deb-repo@10
      with:
        repo-name: obs
        repo: deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_20.04/ ./
        keys-asc: https://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_20.04/Release.key
        install: libzmq5 libzmq3-dev libglx-dev mesa-common-dev libasound2-dev libglew-dev libunwind-dev

    - name: Add brew packages
      if: ${{ matrix.os == 'macos-10.15' }}
      shell: bash
      run: brew install automake autoconf cmake

    - name: libZMQ Dep
      if: ${{ matrix.os == 'macos-10.15' }}
      run: |
        git clone https://github.com/zeromq/libzmq.git
        cd libzmq
        ./autogen.sh
        ./configure
        make
        sudo make install

    - name: Python dep
      if: ${{ matrix.os == 'macos-10.15' }}
      run: |
        ./dist/osx/build_python.sh ${{github.workspace}}/build/python
        PY_ROOT=`${{github.workspace}}/build/python/Python.framework/Versions/Current/bin/python3 -c "import sys;print(sys.base_prefix)"`
        echo "CMAKE_OPTIONS=-DPython3_ROOT_DIR=$PY_ROOT -DWITH_EMBED_PYTHON=ON -DWITH_OPENVR=OFF -DWITH_DEV=OFF" >> $GITHUB_ENV

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} $CMAKE_OPTIONS

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Pack
      if: ${{ matrix.os == 'macos-10.15' }}
      working-directory: ${{github.workspace}}/build
      run: cpack -V

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} -VV

    - name: Upload file via SSH only on push
      working-directory: ${{github.workspace}}/build
      if: github.event_name == 'push'
      env:
        BBPWD: ${{ secrets.BBPWD }}
      run: |
        git fetch --all --tags
        if [ "${RUNNER_OS}" == "Linux" ]; then zip -q -r $( echo $GITHUB_REPOSITORY | cut -d"/" -f2)_${RUNNER_OS}_$( git describe --tag --always --dirty --abbrev=4).zip * -x "*/test/*" "*/__pycache__/*"; fi
        if [ ! -d "$HOME/.ssh" ]; then mkdir $HOME/.ssh; fi
        echo '|1|AurlN3z7WhvxYbuNdsouT5s7FYs=|cjTFODbUXIXKeWihh1BjnfXgARw= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFxUlmYnS6gItSE4QuXpJxVFqhatyadmYaSQ+GPYwna9bs3KoWxfYl2j0ijA4aVAPPZLjLAjNbxd26fIrocW5fQ=' >> $HOME/.ssh/known_hosts
        git clone https://github.com/clarkwang/passh.git
        cd passh
        cc -o passh passh.c
        ./passh -p env:BBPWD scp ../gazebosc_*_* buildbot@pong.hku.nl:public_html/gazebosc/
